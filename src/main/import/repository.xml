<?xml version="1.0" encoding="UTF-8"?>
<content xmlns:j="http://www.jahia.org/jahia/1.0" xmlns:jcr="http://www.jcp.org/jcr/1.0">
   <modules jcr:primaryType="jnt:modules">
      <user-cleanup-tool j:dependencies="default"
                         j:modulePriority="0"
                         j:moduleType="module"
                         j:title="user-cleanup-tool"
                         jcr:mixinTypes="jmix:hasExternalProviderExtension"
                         jcr:primaryType="jnt:module">
         <sources j:title="User Cleanup Tool (2.4.0-SNAPSHOT)"
                  jcr:mixinTypes="jmix:sourceControl jmix:hasExternalProviderExtension"
                  jcr:primaryType="jnt:moduleVersionFolder"
                  scmStatus="modified"
                  j:staticMountPointProviderKey="module-user-cleanup-tool-2.4.0-SNAPSHOT">
            <src jcr:mixinTypes="jmix:sourceControl jmix:hasExternalProviderExtension"
                 jcr:primaryType="jnt:folder"
                 scmStatus="modified">
               <main jcr:mixinTypes="jmix:sourceControl jmix:hasExternalProviderExtension"
                     jcr:primaryType="jnt:folder"
                     scmStatus="modified">
                  <java jcr:mixinTypes="jmix:sourceControl jmix:hasExternalProviderExtension"
                        jcr:primaryType="jnt:javaPackageFolder"
                        scmStatus="modified">
                     <org jcr:mixinTypes="jmix:sourceControl jmix:hasExternalProviderExtension"
                          jcr:primaryType="jnt:javaPackageFolder"
                          scmStatus="modified">
                        <jahia jcr:mixinTypes="jmix:sourceControl jmix:hasExternalProviderExtension"
                               jcr:primaryType="jnt:folder"
                               scmStatus="modified">
                           <modules jcr:mixinTypes="jmix:sourceControl jmix:hasExternalProviderExtension"
                                    jcr:primaryType="jnt:javaPackageFolder"
                                    scmStatus="modified">
                              <usercleanuptool jcr:mixinTypes="jmix:sourceControl jmix:hasExternalProviderExtension"
                                               jcr:primaryType="jnt:javaPackageFolder"
                                               scmStatus="modified">
                                 <RemovalUtility.java jcr:mixinTypes="jmix:sourceControl"
                                                      jcr:primaryType="jnt:javaSourceFile"
                                                      scmStatus="modified"
                                                      sourceCode="package org.jahia.modules.usercleanuptool;&#xA;&#xA;import org.jahia.registries.ServicesRegistry;&#xA;import org.jahia.services.cache.CacheHelper;&#xA;import org.jahia.services.content.JCRCallback;&#xA;import org.jahia.services.content.JCRNodeWrapper;&#xA;import org.jahia.services.content.JCRSessionFactory;&#xA;import org.jahia.services.content.JCRSessionWrapper;&#xA;import org.jahia.services.content.JCRStoreProvider;&#xA;import org.jahia.services.content.JCRTemplate;&#xA;import org.jahia.services.query.ScrollableQuery;&#xA;import org.jahia.services.usermanager.JahiaGroupManagerService;&#xA;import org.jahia.services.usermanager.JahiaUserManagerService;&#xA;import org.slf4j.Logger;&#xA;import org.slf4j.LoggerFactory;&#xA;&#xA;import javax.jcr.RepositoryException;&#xA;import javax.jcr.query.Query;&#xA;import javax.jcr.query.QueryManager;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;import java.util.function.Function;&#xA;import java.util.stream.Collectors;&#xA;&#xA;public final class RemovalUtility {&#xA;&#xA;    private static Logger logger = LoggerFactory.getLogger(RemovalUtility.class);&#xA;&#xA;    public static final int SELECTION_SIZE = 25;&#xA;    public static final int QUERY_STEP = 30;&#xA;&#xA;    public static void removeNode(String[] paths) throws RepositoryException {&#xA;        flushAllCaches();&#xA;        JCRTemplate.getInstance().doExecuteWithSystemSession(new JCRCallback&lt;Void&gt;() {&#xA;            @Override&#xA;            public Void doInJCR(JCRSessionWrapper jcrSessionWrapper) throws RepositoryException {&#xA;&#xA;                for (String path : paths) {&#xA;                    if (jcrSessionWrapper.nodeExists(path)) {&#xA;                        jcrSessionWrapper.removeItem(path);&#xA;                        logger.info(&#34;Removed node: {}&#34;, path);&#xA;                    }&#xA;                }&#xA;&#xA;                jcrSessionWrapper.save();&#xA;                return null;&#xA;            }&#xA;        });&#xA;    }&#xA;&#xA;    public static List&lt;User&gt; getUsersFromAces(int offset) throws RepositoryException {&#xA;        flushAllCaches();&#xA;        String query = &#34;select * from [jnt:ace]&#34;;&#xA;        Function&lt;JCRNodeWrapper, Boolean&gt; pred = node -&gt; {&#xA;            try {&#xA;                if (node.hasProperty(&#34;j:principal&#34;) &amp;&amp; node.getPropertyAsString(&#34;j:principal&#34;).startsWith(&#34;u:&#34;)) {&#xA;                    String userName = node.getPropertyAsString(&#34;j:principal&#34;).replace(&#34;u:&#34;, &#34;&#34;);&#xA;                    JahiaUserManagerService um = JahiaUserManagerService.getInstance();&#xA;                    boolean existsGlobally = um.userExists(userName);&#xA;                    boolean existsLocally = um.userExists(userName, node.getResolveSite().getSiteKey());&#xA;&#xA;                    return !existsGlobally &amp;&amp; !existsLocally;&#xA;                }&#xA;&#xA;                if (node.hasProperty(&#34;j:principal&#34;) &amp;&amp; node.getPropertyAsString(&#34;j:principal&#34;).startsWith(&#34;g:&#34;)) {&#xA;                    String groupName = node.getPropertyAsString(&#34;j:principal&#34;).replace(&#34;g:&#34;, &#34;&#34;);&#xA;                    JahiaGroupManagerService gm = JahiaGroupManagerService.getInstance();&#xA;                    boolean existsLocally = gm.groupExists(node.getResolveSite().getSiteKey(), groupName);&#xA;                                            &#xA;                    return !JahiaGroupManagerService.PROTECTED_GROUPS.contains(groupName) &amp;&amp; !existsLocally &amp;&amp; !gm.groupExists(null, groupName);&#xA;                }&#xA;            } catch (RepositoryException e) {&#xA;                logger.error(&#34;Failed to look up user&#34;, e);&#xA;            }&#xA;&#xA;            return false;&#xA;        };&#xA;&#xA;        return runQuery(query, pred, offset);&#xA;    }&#xA;&#xA;    public static List&lt;User&gt; getMembers(int offset) throws RepositoryException {&#xA;        flushAllCaches();&#xA;        String query = &#34;select * from [jnt:member] as m where m.['jcr:primaryType'] = 'jnt:member'&#34;;&#xA;        Function&lt;JCRNodeWrapper, Boolean&gt; pred = node -&gt; {&#xA;            try {&#xA;                if (node.hasProperty(&#34;j:member&#34;)) {&#xA;                    String member = node.getPropertyAsString(&#34;j:member&#34;);&#xA;                    return node.getSession().getNodeByIdentifier(member) == null;&#xA;                } else {&#xA;                 return true; //jnt:member must have a j:member else it is invalid&#xA;                }&#xA;            } catch (RepositoryException e) {&#xA;                return true;  //in case of error return true&#xA;            }&#xA;        };&#xA;&#xA;        return runQuery(query, pred, offset);&#xA;    }&#xA;&#xA;    private static List&lt;User&gt; runQuery(String query, Function&lt;JCRNodeWrapper, Boolean&gt; predicate, int offset) throws RepositoryException {&#xA;        flushAllCaches();&#xA;        return JCRTemplate.getInstance().doExecuteWithSystemSession(new JCRCallback&lt;List&lt;User&gt;&gt;() {&#xA;            @Override&#xA;            public List&lt;User&gt; doInJCR(JCRSessionWrapper jcrSessionWrapper) throws RepositoryException {&#xA;                List&lt;JCRNodeWrapper&gt; list = new ArrayList&lt;&gt;();&#xA;                QueryManager qm = jcrSessionWrapper.getWorkspace().getQueryManager();&#xA;                Query q = qm.createQuery(query, Query.JCR_SQL2);&#xA;                ScrollableQuery scrollableQuery = new ScrollableQuery(QUERY_STEP, q);&#xA;                scrollableQuery.execute(new Scroller(predicate, list, SELECTION_SIZE, offset));&#xA;&#xA;                return list.stream().map(n -&gt; {&#xA;                    try {&#xA;                        return new User(n.getName(), n.getPath(), n.getPrimaryNodeTypeName());&#xA;                    } catch (RepositoryException e) {&#xA;                        logger.error(&#34;Failed to get node info&#34;, e);&#xA;                    }&#xA;                    return null;&#xA;                }).collect(Collectors.toList());&#xA;            }&#xA;        });&#xA;&#xA;    }&#xA;&#xA;    private static void flushAllCaches() {&#xA;        //flush user/group caches to get the correct results&#xA;        CacheHelper.flushEhcacheByName(&#34;LDAPUsersCache&#34;, true);&#xA;        CacheHelper.flushEhcacheByName(&#34;LDAPGroupCache&#34;, true);&#xA;        CacheHelper.flushEhcacheByName(&#34;org.jahia.services.usermanager.JahiaGroupManagerService.membershipCache&#34;, true);&#xA;        CacheHelper.flushEhcacheByName(&#34;org.jahia.services.usermanager.JahiaUserManagerService.userPathByUserNameCache&#34;, true);&#xA;        CacheHelper.flushEhcacheByName(&#34;org.jahia.services.usermanager.JahiaGroupManagerService.groupPathByGroupNameCache&#34;, true);&#xA;&#xA;    }&#xA;    &#xA;    &#xA; public static List&lt;JCRStoreProvider&gt; getExternalUserProvider() throws RepositoryException {&#xA;  &#xA;  List&lt;JCRStoreProvider&gt; providers = new ArrayList&lt;JCRStoreProvider&gt;();&#xA;  &#xA;  JCRSessionWrapper session = JCRSessionFactory.getInstance().getCurrentUserSession();&#xA;  List&lt;JCRStoreProvider&gt; providerList = JahiaUserManagerService.getInstance().getProviderList(session);&#xA;  if (providerList != null &amp;&amp; !providerList.isEmpty()) {&#xA;   for (JCRStoreProvider prov : providerList) {&#xA;    if (!&#34;default&#34;.equals(prov.getKey())) {&#xA;     providers.add(prov);&#xA;    }&#xA;   }&#xA;  }&#xA;  //Check sites&#xA;     List&lt;String&gt; sites = ServicesRegistry.getInstance().getJahiaSitesService().getSitesNames();&#xA;  &#xA;  for (String site : sites) {&#xA;   List&lt;JCRStoreProvider&gt; siteProviderList = JahiaUserManagerService.getInstance().getProviderList(site, session);&#xA;   if (siteProviderList != null &amp;&amp; !siteProviderList.isEmpty()) {&#xA;    for (JCRStoreProvider prov : siteProviderList) {&#xA;     if (!&#34;default&#34;.equals(prov.getKey())) {&#xA;      providers.add(prov);&#xA;     }&#xA;    }&#xA;   }   &#xA;  }&#xA;  return providers;&#xA;&#xA; }&#xA; &#xA; public static List&lt;JCRStoreProvider&gt; getExternalGroupProvider() throws RepositoryException {&#xA;  &#xA;  List&lt;JCRStoreProvider&gt; providers = new ArrayList&lt;JCRStoreProvider&gt;();&#xA;  &#xA;  JCRSessionWrapper session = JCRSessionFactory.getInstance().getCurrentUserSession();&#xA;  List&lt;JCRStoreProvider&gt; providerList = JahiaGroupManagerService.getInstance().getProviderList(null, session);&#xA;  if (providerList != null &amp;&amp; !providerList.isEmpty()) {&#xA;   for (JCRStoreProvider prov : providerList) {&#xA;    if (!&#34;default&#34;.equals(prov.getKey())) {&#xA;     providers.add(prov);&#xA;    }&#xA;   }&#xA;  }&#xA;  //Check sites&#xA;     List&lt;String&gt; sites = ServicesRegistry.getInstance().getJahiaSitesService().getSitesNames();&#xA;  &#xA;  for (String site : sites) {&#xA;   List&lt;JCRStoreProvider&gt; siteProviderList = JahiaGroupManagerService.getInstance().getProviderList(site, session);&#xA;   if (siteProviderList != null &amp;&amp; !siteProviderList.isEmpty()) {&#xA;    for (JCRStoreProvider prov : siteProviderList) {&#xA;     if (!&#34;default&#34;.equals(prov.getKey())) {&#xA;      providers.add(prov);&#xA;     }&#xA;    }&#xA;   }   &#xA;  }&#xA;  return providers;&#xA;&#xA; }&#xA;}&#xA;"/>
                              </usercleanuptool>
                           </modules>
                        </jahia>
                     </org>
                  </java>
                  <resources jcr:mixinTypes="jmix:sourceControl jmix:hasExternalProviderExtension"
                             jcr:primaryType="jnt:folder"
                             scmStatus="modified">
                     <tools jcr:mixinTypes="jmix:sourceControl jmix:hasExternalProviderExtension"
                            jcr:primaryType="jnt:folder"
                            scmStatus="modified">
                        <cleanup-users.jsp jcr:mixinTypes="jmix:sourceControl"
                                           jcr:primaryType="jnt:viewFile"
                                           nodeTypeName="tools"
                                           scmStatus="modified"
                                           sourceCode="&lt;%@ page language=&#34;java&#34; contentType=&#34;text/html;charset=UTF-8&#34;&#xA;%&gt;&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34; ?&gt;&#xA;&lt;%@ page import=&#34;org.jahia.modules.usercleanuptool.RemovalUtility&#34; %&gt;&#xA;&lt;%@ page import=&#34;org.jahia.services.content.JCRStoreProvider&#34; %&gt;&#xA;&lt;%@ page import=&#34;java.util.List&#34; %&gt;&#xA;&lt;%@ taglib prefix=&#34;template&#34; uri=&#34;http://www.jahia.org/tags/templateLib&#34; %&gt;&#xA;&lt;%@ taglib prefix=&#34;c&#34; uri=&#34;http://java.sun.com/jsp/jstl/core&#34; %&gt;&#xA;&lt;%@ taglib prefix=&#34;fn&#34; uri=&#34;http://java.sun.com/jsp/jstl/functions&#34; %&gt;&#xA;&lt;%@ taglib prefix=&#34;jcr&#34; uri=&#34;http://www.jahia.org/tags/jcr&#34; %&gt;&#xA;&lt;%@ taglib prefix=&#34;fmt&#34; uri=&#34;http://java.sun.com/jstl/fmt_rt&#34; %&gt;&#xA;&lt;%@ taglib prefix=&#34;functions&#34; uri=&#34;http://www.jahia.org/tags/functions&#34; %&gt;&#xA;&lt;%--@elvariable id=&#34;currentNode&#34; type=&#34;org.jahia.services.content.JCRNodeWrapper&#34;--%&gt;&#xA;&lt;%--@elvariable id=&#34;out&#34; type=&#34;java.io.PrintWriter&#34;--%&gt;&#xA;&lt;%--@elvariable id=&#34;script&#34; type=&#34;org.jahia.services.render.scripting.Script&#34;--%&gt;&#xA;&lt;%--@elvariable id=&#34;scriptInfo&#34; type=&#34;java.lang.String&#34;--%&gt;&#xA;&lt;%--@elvariable id=&#34;workspace&#34; type=&#34;java.lang.String&#34;--%&gt;&#xA;&lt;%--@elvariable id=&#34;renderContext&#34; type=&#34;org.jahia.services.render.RenderContext&#34;--%&gt;&#xA;&lt;%--@elvariable id=&#34;currentResource&#34; type=&#34;org.jahia.services.render.Resource&#34;--%&gt;&#xA;&lt;%--@elvariable id=&#34;url&#34; type=&#34;org.jahia.services.render.URLGenerator&#34;--%&gt;&#xA;&#xA;&lt;%&#xA;    response.setHeader(&#34;Cache-Control&#34;, &#34;no-cache, no-store, must-revalidate&#34;);&#xA;    response.setHeader(&#34;Pragma&#34;, &#34;no-cache&#34;);&#xA;    response.setDateHeader(&#34;Expires&#34;, 0);&#xA;%&gt;&#xA;&#xA;&lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.0 Strict//EN&#34; &#34;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&#34;&gt;&#xA;&lt;html xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;&#xA;&lt;head&gt;&#xA;    &lt;style&gt;&#xA;        .navButtons {&#xA;            display: flex;&#xA;            flex-direction: row;&#xA;            justify-content: space-between;&#xA;            width: 200px;&#xA;            margin-top: 10px;&#xA;        }&#xA;&#xA;        .entryList {&#xA;            list-style: none;&#xA;        }&#xA;&#xA;        .entryList li {&#xA;            display: flex;&#xA;            flex-direction: row;&#xA;            padding: 0 0 10px;&#xA;        }&#xA;        .info {&#xA;            font-size: large;&#xA;            color: darkblue;&#xA;            background-color: lightblue;&#xA;            padding: 10px;&#xA;            width: 700px;&#xA;        }&#xA;        .warning {&#xA;            font-size: large;&#xA;            color: red;&#xA;            background-color: yellow;&#xA;            padding: 10px;&#xA;            width: 700px;&#xA;        }      &#xA;    &lt;/style&gt;&#xA;    &lt;script type=&#34;text/javascript&#34;&gt;&#xA;        function selectAll(e) {&#xA;            var checked = e.target.checked;&#xA;            var inputs = e.target.parentNode.parentNode.querySelectorAll(&#34;input&#34;);&#xA;            for (var i = 0; i &lt; inputs.length; i++) {&#xA;                inputs[i].checked = checked;&#xA;            }&#xA;        }&#xA;    &lt;/script&gt;&#xA;&lt;/head&gt;&#xA;&#xA;&lt;c:set var=&#34;nextAce&#34; value=&#34;${not empty param.nextAce ? param.nextAce : 0}&#34;/&gt;&#xA;&lt;c:set var=&#34;nextMember&#34; value=&#34;${not empty param.nextMember ? param.nextMember : 0}&#34;/&gt;&#xA;&#xA;&lt;%&#xA;&#xA;    String[] acesToRemove = request.getParameterValues(&#34;acesToRemove&#34;);&#xA;    String[] membersToRemove = request.getParameterValues(&#34;membersToRemove&#34;);&#xA;&#xA;    if (acesToRemove != null &amp;&amp; acesToRemove.length &gt; 0) {&#xA;        RemovalUtility.removeNode(acesToRemove);&#xA;    }&#xA;&#xA;    if (membersToRemove != null &amp;&amp; membersToRemove.length &gt; 0) {&#xA;        RemovalUtility.removeNode(membersToRemove);&#xA;    }&#xA;&#xA;    String nextAce = request.getParameter(&#34;nextAce&#34;);&#xA;    String nextMember = request.getParameter(&#34;nextMember&#34;);&#xA;&#xA;    pageContext.setAttribute(&#34;aces&#34;, RemovalUtility.getUsersFromAces(RemovalUtility.SELECTION_SIZE * Integer.parseInt(nextAce == null ? &#34;0&#34; : nextAce)));&#xA;    pageContext.setAttribute(&#34;members&#34;, RemovalUtility.getMembers(RemovalUtility.SELECTION_SIZE * Integer.parseInt(nextMember == null ? &#34;0&#34; : nextMember)));&#xA;%&gt;&#xA;&#xA;&lt;body&gt;&#xA;&#xA;&lt;div class=&#34;info&#34;&gt;&#xA;    This tool helps you find and clean references, found in roles and groups, of users which are unknown to the system (e.g. it can happen when a user has been removed from a LDAP directory).&#xA;&lt;/div&gt;&lt;br/&gt;&#xA;  &#xA;&lt;div class=&#34;info&#34;&gt;&#xA;  &lt;b&gt;List of current External User Providers:&lt;/b&gt;&lt;br/&gt;&#xA;  &lt;%&#xA;     boolean inActiveUser = false;&#xA;     for (JCRStoreProvider prov : RemovalUtility.getExternalUserProvider()) {&#xA;         String output = prov.getKey();&#xA;         if (prov.isAvailable()) {&#xA;             output += &#34; for &#34; + prov.getMountPoint() + &#34; - active&#34;;&#xA;         } else {&#xA;             output += &#34; for &#34; + prov.getMountPoint() + &#34; - &lt;b&gt;inactive&lt;/b&gt;&#34;;&#xA;             inActiveUser = true;&#xA;         }&#xA;         %&gt;&lt;%=output%&gt;&lt;br/&gt;&lt;%&#xA;     &#xA;     }&#xA;     %&gt;&#xA;  &#xA;    &lt;br/&gt;&lt;b&gt;List of current External Group Providers: &lt;/b&gt;&lt;br/&gt;&#xA;     &lt;%&#xA;     boolean inActiveGroup = false;&#xA;     for (JCRStoreProvider prov : RemovalUtility.getExternalGroupProvider()) {&#xA;         String output = prov.getKey();&#xA;         if (prov.isAvailable()) {&#xA;             output += &#34; for &#34; + prov.getMountPoint() + &#34; - active&#34;;&#xA;         } else {&#xA;             output += &#34; for &#34; + prov.getMountPoint() + &#34; - &lt;b&gt;inactive&lt;/b&gt;&#34;;&#xA;             inActiveGroup = true;&#xA;         }&#xA;         %&gt;&lt;%=output%&gt;&lt;/br&gt;&lt;%&#xA;     &#xA;     }&#xA;     %&gt;&#xA;     &#xA;    &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Check if all of your External Providers are in the list (if a provider is stopped it won't appear in the list)!&lt;/b&gt;&#xA;&lt;/div&gt; &lt;br/&gt;&#xA;&lt;% if (inActiveGroup || inActiveUser) { %&gt;       &#xA;&lt;div class=&#34;warning&#34;&gt;&#xA;    BE CAREFULL, SOME PROVIDERS ARE INACTIVE, BEFORE YOU CLEAN CHECK IF THE REFERENCES SHOULD BE REALLY DELETED!&#xA;&lt;/div&gt;&#xA;&lt;%}%&gt;&#xA;       &#xA;&#xA;&lt;div&gt;&#xA;    &lt;h2&gt;Aces (jnt:ace) with nonexistent principals&lt;/h2&gt;&#xA;    &lt;c:choose&gt;&#xA;        &lt;c:when test=&#34;${not empty aces}&#34;&gt;&#xA;            &lt;form id=&#34;acesForm&#34; action=&#34;?&#34; method=&#34;post&#34;&gt;&#xA;                &lt;input type=&#34;hidden&#34; name=&#34;toolAccessToken&#34; value=&#34;${toolAccessToken}&#34;/&gt;&#xA;                &lt;ul class=&#34;entryList&#34;&gt;&#xA;                    &lt;li&gt;&lt;input type=&#34;checkbox&#34; onclick=&#34;selectAll(event)&#34; name=&#34;Select all&#34;/&gt; &lt;strong&gt;Select all&lt;/strong&gt;&lt;/li&gt;&#xA;                    &lt;c:forEach var=&#34;user&#34; items=&#34;${aces}&#34;&gt;&#xA;                        &lt;li&gt;&lt;input type=&#34;checkbox&#34; name=&#34;acesToRemove&#34; value=&#34;${user.path}&#34;&gt;&lt;strong&gt;${user.name}&lt;/strong&gt;&amp;nbsp;at path&amp;nbsp;&lt;strong&gt;${user.path}&lt;/strong&gt;&lt;/li&gt;&#xA;                    &lt;/c:forEach&gt;&#xA;                &lt;/ul&gt;&#xA;                &lt;input type=&#34;submit&#34; name=&#34;action&#34; value=&#34;Remove selected aces&#34;  title=&#34;Remove selected aces&#34; /&gt;&#xA;            &lt;/form&gt;&#xA;        &lt;/c:when&gt;&#xA;        &lt;c:otherwise&gt;&#xA;            No aces found&#xA;        &lt;/c:otherwise&gt;&#xA;    &lt;/c:choose&gt;&#xA;    &lt;div class=&#34;navButtons&#34;&gt;&#xA;        &lt;c:if test=&#34;${nextAce != 0}&#34;&gt;&#xA;            &lt;form id=&#34;acesNavPrevForm&#34; action=&#34;?&#34; method=&#34;get&#34;&gt;&#xA;                &lt;input type=&#34;hidden&#34; name=&#34;toolAccessToken&#34; value=&#34;${toolAccessToken}&#34;/&gt;&#xA;                &lt;input type=&#34;number&#34; name=&#34;nextAce&#34; id=&#34;prevAce&#34; value=&#34;${nextAce == 0 ? nextAce : nextAce - 1}&#34; hidden/&gt;&#xA;                &lt;input type=&#34;number&#34; name=&#34;nextMember&#34; value=&#34;${nextMember}&#34; hidden/&gt;&#xA;                &lt;input type=&#34;submit&#34; value=&#34;Prev&#34;  title=&#34;Prev&#34; /&gt;&#xA;            &lt;/form&gt;&#xA;        &lt;/c:if&gt;&#xA;&#xA;        &lt;span&gt;Page ${nextAce + 1}&lt;/span&gt;&#xA;&#xA;        &lt;c:if test=&#34;${not empty aces}&#34;&gt;&#xA;            &lt;form id=&#34;acesNavNextForm&#34; action=&#34;?&#34; method=&#34;get&#34;&gt;&#xA;                &lt;input type=&#34;hidden&#34; name=&#34;toolAccessToken&#34; value=&#34;${toolAccessToken}&#34;/&gt;&#xA;                &lt;input type=&#34;number&#34; name=&#34;nextAce&#34; id=&#34;nextAce&#34; value=&#34;${nextAce + 1}&#34; hidden/&gt;&#xA;                &lt;input type=&#34;number&#34; name=&#34;nextMember&#34; value=&#34;${nextMember}&#34; hidden/&gt;&#xA;                &lt;input type=&#34;submit&#34; value=&#34;Next&#34;  title=&#34;Next&#34; /&gt;&#xA;            &lt;/form&gt;&#xA;        &lt;/c:if&gt;&#xA;    &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;div&gt;&#xA;    &lt;h2&gt;Members (jnt:member) with nonexistent references&lt;/h2&gt;&#xA;    &lt;c:choose&gt;&#xA;        &lt;c:when test=&#34;${not empty members}&#34;&gt;&#xA;            &lt;form id=&#34;acesForm&#34; action=&#34;?&#34; method=&#34;post&#34;&gt;&#xA;                &lt;input type=&#34;hidden&#34; name=&#34;toolAccessToken&#34; value=&#34;${toolAccessToken}&#34;/&gt;&#xA;                &lt;ul class=&#34;entryList&#34;&gt;&#xA;                    &lt;li&gt;&lt;input type=&#34;checkbox&#34; onclick=&#34;selectAll(event)&#34; value=&#34;SelectAll&#34;/&gt; &lt;strong&gt;Select all&lt;/strong&gt;&lt;/li&gt;&#xA;                    &lt;c:forEach var=&#34;user&#34; items=&#34;${members}&#34;&gt;&#xA;                        &lt;li&gt;&lt;input type=&#34;checkbox&#34; name=&#34;membersToRemove&#34; value=&#34;${user.path}&#34;&gt;&lt;strong&gt;${user.name}&lt;/strong&gt;&amp;nbsp;at path&amp;nbsp;&lt;strong&gt;${user.path}&lt;/strong&gt;&lt;/li&gt;&#xA;                    &lt;/c:forEach&gt;&#xA;                &lt;/ul&gt;&#xA;                &lt;input type=&#34;submit&#34; name=&#34;action&#34; value=&#34;Remove selected members&#34;  title=&#34;Remove selected members&#34; /&gt;&#xA;            &lt;/form&gt;&#xA;        &lt;/c:when&gt;&#xA;        &lt;c:otherwise&gt;&#xA;            No members found&#xA;        &lt;/c:otherwise&gt;&#xA;    &lt;/c:choose&gt;&#xA;    &lt;div class=&#34;navButtons&#34;&gt;&#xA;        &lt;c:if test=&#34;${nextMember != 0}&#34;&gt;&#xA;            &lt;form id=&#34;membersNavPrevForm&#34; action=&#34;?&#34; method=&#34;get&#34;&gt;&#xA;                &lt;input type=&#34;hidden&#34; name=&#34;toolAccessToken&#34; value=&#34;${toolAccessToken}&#34;/&gt;&#xA;                &lt;input type=&#34;number&#34; name=&#34;nextMember&#34; id=&#34;prevMember&#34; value=&#34;${nextMember == 0 ? nextMember : nextMember - 1}&#34; hidden/&gt;&#xA;                &lt;input type=&#34;number&#34; name=&#34;nextAce&#34; value=&#34;${nextAce}&#34; hidden/&gt;&#xA;                &lt;input type=&#34;submit&#34; value=&#34;Prev&#34; title=&#34;Prev&#34; /&gt;&#xA;            &lt;/form&gt;&#xA;        &lt;/c:if&gt;&#xA;&#xA;        &lt;span&gt;Page ${nextMember + 1}&lt;/span&gt;&#xA;&#xA;        &lt;c:if test=&#34;${not empty members}&#34;&gt;&#xA;            &lt;form id=&#34;membersNavNextForm&#34; action=&#34;?&#34; method=&#34;get&#34;&gt;&#xA;                &lt;input type=&#34;hidden&#34; name=&#34;toolAccessToken&#34; value=&#34;${toolAccessToken}&#34;/&gt;&#xA;                &lt;input type=&#34;number&#34; name=&#34;nextMember&#34; id=&#34;nextMember&#34; value=&#34;${nextMember + 1}&#34; hidden/&gt;&#xA;                &lt;input type=&#34;number&#34; name=&#34;nextAce&#34; value=&#34;${nextAce}&#34; hidden/&gt;&#xA;                &lt;input type=&#34;submit&#34; value=&#34;Next&#34; title=&#34;Next&#34; /&gt;&#xA;            &lt;/form&gt;&#xA;        &lt;/c:if&gt;&#xA;    &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;"/>
                     </tools>
                  </resources>
               </main>
            </src>
         </sources>
         <portlets jcr:primaryType="jnt:portletFolder"/>
         <files jcr:primaryType="jnt:folder"/>
         <contents jcr:primaryType="jnt:contentFolder"/>
         <templates j:rootTemplatePath="/base" jcr:primaryType="jnt:templatesFolder">
            <files jcr:primaryType="jnt:folder"/>
            <contents jcr:primaryType="jnt:contentFolder"/>
         </templates>
      </user-cleanup-tool>
   </modules>
</content>